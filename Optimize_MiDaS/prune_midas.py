import torch
import torch.nn.utils.prune as prune
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.transforms as transforms
from torchvision.datasets import CIFAR10
from torchvision.models import resnet18

#load the pre-trained MiDas model
model = torch.hub.load('intel-isl/MiDaS','MiDaS_small')
model.eval()

for name, param in model.named_parameters():
    print(name)

#prune the model (removing some of the connections in the neurons, increasing speed but decreasing accuracy)
parameters = (
    (model.pretrained.layer1[0], "weight"),
    (model.pretrained.layer1[1], "weight"),
    (model.pretrained.layer1[1], "bias"),
    (model.pretrained.layer1[3][0].conv_dw, "weight"),
    (model.pretrained.layer1[3][0].bn1, "weight"),
    (model.pretrained.layer1[3][0].bn1, "bias"),
    (model.pretrained.layer1[3][0].conv_pw, "weight"),
    (model.pretrained.layer1[3][0].bn2, "weight"),
    (model.pretrained.layer1[3][0].bn2, "bias"),
    (model.pretrained.layer1[4][0].conv_pw, "weight"),
    (model.pretrained.layer1[4][0].bn1, "weight"),
    (model.pretrained.layer1[4][0].bn1, "bias"),
    (model.pretrained.layer1[4][0].conv_dw, "weight"),
    (model.pretrained.layer1[4][0].bn2, "weight"),
    (model.pretrained.layer1[4][0].bn2, "bias"),
    (model.pretrained.layer1[4][0].conv_pwl, "weight"),
    (model.pretrained.layer1[4][0].bn3, "weight"),
    (model.pretrained.layer1[4][0].bn3, "bias"),
    (model.pretrained.layer1[4][1].conv_pw, "weight"),
    (model.pretrained.layer1[4][1].bn1, "weight"),
    (model.pretrained.layer1[4][1].bn1, "bias"),
    (model.pretrained.layer1[4][1].conv_dw, "weight"),
    (model.pretrained.layer1[4][1].bn2, "weight"),
    (model.pretrained.layer1[4][1].bn2, "bias"),
    (model.pretrained.layer1[4][1].conv_pwl, "weight"),
    (model.pretrained.layer1[4][1].bn3, "weight"),
    (model.pretrained.layer1[4][1].bn3, "bias"),
    (model.pretrained.layer1[4][2].conv_pw, "weight"),
    (model.pretrained.layer1[4][2].bn1, "weight"),
    (model.pretrained.layer1[4][2].bn1, "bias"),
    (model.pretrained.layer1[4][2].conv_dw, "weight"),
    (model.pretrained.layer1[4][2].bn2, "weight"),
    (model.pretrained.layer1[4][2].bn2, "bias"),
    (model.pretrained.layer1[4][2].conv_pwl, "weight"),
    (model.pretrained.layer1[4][2].bn3, "weight"),
    (model.pretrained.layer1[4][2].bn3, "bias"),
    (model.pretrained.layer2[0][0].conv_pw, "weight"),
    (model.pretrained.layer2[0][0].bn1, "weight"),
    (model.pretrained.layer2[0][0].bn1, "bias"),
    (model.pretrained.layer2[0][0].conv_dw, "weight"),
    (model.pretrained.layer2[0][0].bn2, "weight"),
    (model.pretrained.layer2[0][0].bn2, "bias"),
    (model.pretrained.layer2[0][0].conv_pwl, "weight"),
    (model.pretrained.layer2[0][0].bn3, "weight"),
    (model.pretrained.layer2[0][0].bn3, "bias"),
    (model.pretrained.layer2[0][1].conv_pw, "weight"),
    (model.pretrained.layer2[0][1].bn1, "weight"),
    (model.pretrained.layer2[0][1].bn1, "bias"),
    (model.pretrained.layer2[0][1].conv_dw, "weight"),
    (model.pretrained.layer2[0][1].bn2, "weight"),
    (model.pretrained.layer2[0][1].bn2, "bias"),
    (model.pretrained.layer2[0][1].conv_pwl, "weight"),
    (model.pretrained.layer2[0][1].bn3, "weight"),
    (model.pretrained.layer2[0][1].bn3, "bias"),
    (model.pretrained.layer2[0][2].conv_pw, "weight"),
    (model.pretrained.layer2[0][2].bn1, "weight"),
    (model.pretrained.layer2[0][2].bn1, "bias"),
    (model.pretrained.layer2[0][2].conv_dw, "weight"),
    (model.pretrained.layer2[0][2].bn2, "weight"),
    (model.pretrained.layer2[0][2].bn2, "bias"),
    (model.pretrained.layer2[0][2].conv_pwl, "weight"),
    (model.pretrained.layer2[0][2].bn3, "weight"),
    (model.pretrained.layer2[0][2].bn3, "bias"),
    (model.pretrained.layer3[0][0].conv_pw, "weight"),
    (model.pretrained.layer3[0][0].bn1, "weight"),
    (model.pretrained.layer3[0][0].bn1, "bias"),
    (model.pretrained.layer3[0][0].conv_dw, "weight"),
    (model.pretrained.layer3[0][0].bn2, "weight"),
    (model.pretrained.layer3[0][0].bn2, "bias"),
    (model.pretrained.layer3[0][0].conv_pwl, "weight"),
    (model.pretrained.layer3[0][0].bn3, "weight"),
    (model.pretrained.layer3[0][0].bn3, "bias"),
    (model.pretrained.layer3[0][1].conv_pw, "weight"),
    (model.pretrained.layer3[0][1].bn1, "weight"),
    (model.pretrained.layer3[0][1].bn1, "bias"),
    (model.pretrained.layer3[0][1].conv_dw, "weight"),
    (model.pretrained.layer3[0][1].bn2, "weight"),
    (model.pretrained.layer3[0][1].bn2, "bias"),
    (model.pretrained.layer3[0][1].conv_pwl, "weight"),
    (model.pretrained.layer3[0][1].bn3, "weight"),
    (model.pretrained.layer3[0][1].bn3, "bias"),
    (model.pretrained.layer3[0][2].conv_pw, "weight"),
    (model.pretrained.layer3[0][2].bn1, "weight"),
    (model.pretrained.layer3[0][2].bn1, "bias"),
    (model.pretrained.layer3[0][2].conv_dw, "weight"),
    (model.pretrained.layer3[0][2].bn2, "weight"),
    (model.pretrained.layer3[0][2].bn2, "bias"),
    (model.pretrained.layer3[0][2].conv_pwl, "weight"),
    (model.pretrained.layer3[0][2].bn3, "weight"),
    (model.pretrained.layer3[0][2].bn3, "bias"),
    (model.pretrained.layer3[0][3].conv_pw, "weight"),
    (model.pretrained.layer3[0][3].bn1, "weight"),
    (model.pretrained.layer3[0][3].bn1, "bias"),
    (model.pretrained.layer3[0][3].conv_dw, "weight"),
    (model.pretrained.layer3[0][3].bn2, "weight"),
    (model.pretrained.layer3[0][3].bn2, "bias"),
    (model.pretrained.layer3[0][3].conv_pwl, "weight"),
    (model.pretrained.layer3[0][3].bn3, "weight"),
    (model.pretrained.layer3[0][3].bn3, "bias"),
    (model.pretrained.layer3[1][0].conv_pw, "weight"),
    (model.pretrained.layer3[1][0].bn1, "weight"),
    (model.pretrained.layer3[1][0].bn1, "bias"),
    (model.pretrained.layer3[1][0].conv_dw, "weight"),
    (model.pretrained.layer3[1][0].bn2, "weight"),
    (model.pretrained.layer3[1][0].bn2, "bias"),
    (model.pretrained.layer3[1][0].conv_pwl, "weight"),
    (model.pretrained.layer3[1][0].bn3, "weight"),
    (model.pretrained.layer3[1][0].bn3, "bias"),
    (model.pretrained.layer3[1][1].conv_pw, "weight"),
    (model.pretrained.layer3[1][1].bn1, "weight"),
    (model.pretrained.layer3[1][1].bn1, "bias"),
    (model.pretrained.layer3[1][1].conv_dw, "weight"),
    (model.pretrained.layer3[1][1].bn2, "weight"),
    (model.pretrained.layer3[1][1].bn2, "bias"),
    (model.pretrained.layer3[1][1].conv_pwl, "weight"),
    (model.pretrained.layer3[1][1].bn3, "weight"),
    (model.pretrained.layer3[1][1].bn3, "bias"),
    (model.pretrained.layer3[1][2].conv_pw, "weight"),
    (model.pretrained.layer3[1][2].bn1, "weight"),
    (model.pretrained.layer3[1][2].bn1, "bias"),
    (model.pretrained.layer3[1][2].conv_dw, "weight"),
    (model.pretrained.layer3[1][2].bn2, "weight"),
    (model.pretrained.layer3[1][2].bn2, "bias"),
    (model.pretrained.layer3[1][2].conv_pwl, "weight"),
    (model.pretrained.layer3[1][2].bn3, "weight"),
    (model.pretrained.layer3[1][2].bn3, "bias"),
    (model.pretrained.layer3[1][3].conv_pw, "weight"),
    (model.pretrained.layer3[1][3].bn1, "weight"),
    (model.pretrained.layer3[1][3].bn1, "bias"),
    (model.pretrained.layer3[1][3].conv_dw, "weight"),
    (model.pretrained.layer3[1][3].bn2, "weight"),
    (model.pretrained.layer3[1][3].bn2, "bias"),
    (model.pretrained.layer3[1][3].conv_pwl, "weight"),
    (model.pretrained.layer3[1][3].bn3, "weight"),
    (model.pretrained.layer3[1][3].bn3, "bias"),
    (model.pretrained.layer4[0][0].conv_pw, "weight"),
    (model.pretrained.layer4[0][0].bn1, "weight"),
    (model.pretrained.layer4[0][0].bn1, "bias"),
    (model.pretrained.layer4[0][0].conv_dw, "weight"),
    (model.pretrained.layer4[0][0].bn2, "weight"),
    (model.pretrained.layer4[0][0].bn2, "bias"),
    (model.pretrained.layer4[0][0].conv_pwl, "weight"),
    (model.pretrained.layer4[0][0].bn3, "weight"),
    (model.pretrained.layer4[0][0].bn3, "bias"),
    (model.pretrained.layer4[0][1].conv_pw, "weight"),
    (model.pretrained.layer4[0][1].bn1, "weight"),
    (model.pretrained.layer4[0][1].bn1, "bias"),
    (model.pretrained.layer4[0][1].conv_dw, "weight"),
    (model.pretrained.layer4[0][1].bn2, "weight"),
    (model.pretrained.layer4[0][1].bn2, "bias"),
    (model.pretrained.layer4[0][1].conv_pwl, "weight"),
    (model.pretrained.layer4[0][1].bn3, "weight"),
    (model.pretrained.layer4[0][1].bn3, "bias"),
    (model.pretrained.layer4[0][2].conv_pw, "weight"),
    (model.pretrained.layer4[0][2].bn1, "weight"),
    (model.pretrained.layer4[0][2].bn1, "bias"),
    (model.pretrained.layer4[0][2].conv_dw, "weight"),
    (model.pretrained.layer4[0][2].bn2, "weight"),
    (model.pretrained.layer4[0][2].bn2, "bias"),
    (model.pretrained.layer4[0][2].conv_pwl, "weight"),
    (model.pretrained.layer4[0][2].bn3, "weight"),
    (model.pretrained.layer4[0][2].bn3, "bias"),
    (model.pretrained.layer4[0][3].conv_pw, "weight"),
    (model.pretrained.layer4[0][3].bn1, "weight"),
    (model.pretrained.layer4[0][3].bn1, "bias"),
    (model.pretrained.layer4[0][3].conv_dw, "weight"),
    (model.pretrained.layer4[0][3].bn2, "weight"),
    (model.pretrained.layer4[0][3].bn2, "bias"),
    (model.pretrained.layer4[0][3].conv_pwl, "weight"),
    (model.pretrained.layer4[0][3].bn3, "weight"),
    (model.pretrained.layer4[0][3].bn3, "bias"),
    (model.pretrained.layer4[0][4].conv_pw, "weight"),
    (model.pretrained.layer4[0][4].bn1, "weight"),
    (model.pretrained.layer4[0][4].bn1, "bias"),
    (model.pretrained.layer4[0][4].conv_dw, "weight"),
    (model.pretrained.layer4[0][4].bn2, "weight"),
    (model.pretrained.layer4[0][4].bn2, "bias"),
    (model.pretrained.layer4[0][4].conv_pwl, "weight"),
    (model.pretrained.layer4[0][4].bn3, "weight"),
    (model.pretrained.layer4[0][4].bn3, "bias"),
    (model.pretrained.layer4[0][5].conv_pw, "weight"),
    (model.pretrained.layer4[0][5].bn1, "weight"),
    (model.pretrained.layer4[0][5].bn1, "bias"),
    (model.pretrained.layer4[0][5].conv_dw, "weight"),
    (model.pretrained.layer4[0][5].bn2, "weight"),
    (model.pretrained.layer4[0][5].bn2, "bias"),
    (model.pretrained.layer4[0][5].conv_pwl, "weight"),
    (model.pretrained.layer4[0][5].bn3, "weight"),
    (model.pretrained.layer4[0][5].bn3, "bias"),
    (model.pretrained.layer4[1][0].bn1, "weight"),
    (model.pretrained.layer4[1][0].bn1, "bias"),
    (model.pretrained.layer4[1][0].conv_dw, "weight"),
    (model.pretrained.layer4[1][0].bn2, "weight"),
    (model.pretrained.layer4[1][0].bn2, "bias"),
    (model.pretrained.layer4[1][0].conv_pwl, "weight"),
    (model.pretrained.layer4[1][0].bn3, "weight"),
    (model.pretrained.layer4[1][0].bn3, "bias"),
    (model.scratch.layer1_rn, "weight"),
    (model.scratch.layer2_rn, "weight"),
    (model.scratch.layer3_rn, "weight"),
    (model.scratch.layer4_rn, "weight"),
    (model.scratch.refinenet4.out_conv, "weight"),
    (model.scratch.refinenet4.out_conv, "bias"),
    (model.scratch.refinenet4.resConfUnit1.conv1, "weight"),
    (model.scratch.refinenet4.resConfUnit1.conv1, "bias"),
    (model.scratch.refinenet4.resConfUnit1.conv2, "weight"),
    (model.scratch.refinenet4.resConfUnit1.conv2, "bias"),
    (model.scratch.refinenet4.resConfUnit2.conv1, "weight"),
    (model.scratch.refinenet4.resConfUnit2.conv1, "bias"),
    (model.scratch.refinenet4.resConfUnit2.conv2, "weight"),
    (model.scratch.refinenet4.resConfUnit2.conv2, "bias"),
    (model.scratch.refinenet3.out_conv, "weight"),
    (model.scratch.refinenet3.out_conv, "bias"),
    (model.scratch.refinenet3.resConfUnit1.conv1, "weight"),
    (model.scratch.refinenet3.resConfUnit1.conv1, "bias"),
    (model.scratch.refinenet3.resConfUnit1.conv2, "weight"),
    (model.scratch.refinenet3.resConfUnit1.conv2, "bias"),
    (model.scratch.refinenet3.resConfUnit2.conv1, "weight"),
    (model.scratch.refinenet3.resConfUnit2.conv1, "bias"),
    (model.scratch.refinenet3.resConfUnit2.conv2, "weight"),
    (model.scratch.refinenet3.resConfUnit2.conv2, "bias"),
    (model.scratch.refinenet2.out_conv, "weight"),
    (model.scratch.refinenet2.out_conv, "bias"),
    (model.scratch.refinenet2.resConfUnit1.conv1, "weight"),
    (model.scratch.refinenet2.resConfUnit1.conv1, "bias"),
    (model.scratch.refinenet2.resConfUnit1.conv2, "weight"),
    (model.scratch.refinenet2.resConfUnit1.conv2, "bias"),
    (model.scratch.refinenet2.resConfUnit2.conv1, "weight"),
    (model.scratch.refinenet2.resConfUnit2.conv1, "bias"),
    (model.scratch.refinenet2.resConfUnit2.conv2, "weight"),
    (model.scratch.refinenet2.resConfUnit2.conv2, "bias"),
    (model.scratch.refinenet1.out_conv, "weight"),
    (model.scratch.refinenet1.out_conv, "bias"),
    (model.scratch.refinenet1.resConfUnit1.conv1, "weight"),
    (model.scratch.refinenet1.resConfUnit1.conv1, "bias"),
    (model.scratch.refinenet1.resConfUnit1.conv2, "weight"),
    (model.scratch.refinenet1.resConfUnit1.conv2, "bias"),
    (model.scratch.refinenet1.resConfUnit2.conv1, "weight"),
    (model.scratch.refinenet1.resConfUnit2.conv1, "bias"),
    (model.scratch.refinenet1.resConfUnit2.conv2, "weight"),
    (model.scratch.refinenet1.resConfUnit2.conv2, "bias"),
    (model.scratch.output_conv[0], "weight"),
    (model.scratch.output_conv[0], "bias"),
    (model.scratch.output_conv[2], "weight"),
    (model.scratch.output_conv[2], "bias"),
    (model.scratch.output_conv[4], "weight"),
    (model.scratch.output_conv[4], "bias"),
)

prune.global_unstructured(
    parameters,
    pruning_method=prune.L1Unstructured,
    amount=0.5,
)

#save the pruned model as state dictionary with weights 
torch.save(model.state_dict(), "pruned_model_weights(0.5).pth")
